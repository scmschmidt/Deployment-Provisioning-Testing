#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Provisions infrastructure by using Ansible.

Exitcodes:

    0   Everything went fine.
    1   Something went wrong

Ideas:
    - 
    - 

ToDo:
    - 


Changelog:
----------
19.08.2022      v0.1        - and so it begins...
"""

# import copy
import datetime
# import hashlib
# from ipaddress import ip_address
# import jinja2
# import json
import os
# import schema
# import subprocess
import sys
# import time
# import random
import yaml

import pprint


VERSION = 'v0.1'
AUTHOR = 'soeren.schmidt@suse.com'


def log(text: str, level: str='info' ) -> None:
    """
    Prints the text to stdout preceded by timestamp and category. 
    """
    category = {'info': 'INFO',
                'success': ' OK ',
                'fail': 'FAIL',
                'warn': 'WARN' 
               }[level]
    print(f'[{datetime.datetime.now()}] [{category}] {text}', file=sys.stdout)

def bye(rc: int=0) -> None:
    """
    Logs termination message and exits with given exit code.
    """
    if rc == 0:
        log(f'Terminating successfully (exit code {rc}).', 'success')
    else:
        log(f'Terminating with failure (exit code {rc})!', 'fail')
    sys.exit(rc)

def load_and_validate(config_file: str) -> dict:
    """
    Loads the config file (YAML) into a dictionary and validates it
    against a schema afterwards.

    Terminates with error message and exit code 1 on failure.
    """

    # Load config
    try: 
        with open(config_file) as f:
            content = yaml.safe_load(f)
    except Exception as err:
        log(f'Error reading landscape: {err}', 'fail')
        bye(1)
    log(f'Landscape "{config_file}" loaded successfully.')

    # Check for an empty config.
    if not content:
        log(f'The landscape "{config_file}" is empty!', 'fail')
        bye(1)

    # Validate against schema.
    # config_schema = schema.Schema({
    #     'build_dir': str,
    #     'provider_dir': str,
    #     'config': {

    #         schema.Optional('skip_deploy'): bool,                                 

    #         # Azure requirement: may not contain the special characters: `\/"[]:|<>+=;,?*@&~!#$%^()_{}
    #         'name': schema.Regex('^[a-z.][a-z0-9.-]{1,40}$',
    #                              error='"name" must be a string matching "^[a-z.][a-z0-9.-]{1,40}$".'),
    #         schema.Optional('update_provider'): bool,                                 
    #         schema.Optional('admin_user'): schema.Regex('^[a-z][-a-z0-9]*$',
    #                                                    error='"name" must be a string matching "^[a-z.][a-z0-9.-]{1,40}$".'),
    #         'admin_user_key': str,
    #         schema.Optional('enable_root_login'): bool,
    #         schema.Optional('keymap'): str,
    #         'location': str,
    #         'provider': str,
    #         schema.Optional('registration_server'): str,
    #         schema.Optional('subnet'): schema.Regex('^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$',
    #                                                 error='Must be a subnet declaration in the form: A.B.C.D/M'),
    #         schema.Optional('subscription_registration_key'): str,
    #         'hosts': [{
    #            'count': schema.And(int, 
    #                                 lambda n: True if isinstance(n, int) and n >= 1 else False,
    #                                 error='"count" must be an integer greater than 1'),
    #             schema.Optional('size'): str,
    #             schema.Optional('os'): str,
    #             schema.Optional('labels'): list
    #         }],
    #         'images': { str: { str: str } },
    #         'sizing': { str:  schema.Or({ str: str }, { str: { str: int } }) }
    #     }
    # }, ignore_extra_keys=True)
    # try:
    #     config_schema.validate(content)
    # except schema.SchemaError as se:
    #     msgs = ['Errors during schema validation:'] 
    #     for err in se.errors + se.autos:
    #         if err:
    #             msgs.append(err)
    #     log('\n\t'.join(msgs), 'fail')
    #     bye(1)
    # log('Schema validation passed.')

    return content

def make_inventory(config: dict) -> dict:
    """
    Uses config and the templates to create 
    am inventory file for Ansible.

    It returns the updated config.
    """

    template = f'''{config['provider_dir']}/templates/{config['provider_args']}-main.tf.template'''
    terraform_dir = 'terraform'
    terraform_file = f'{terraform_dir}/main.tf'

    # Generate machine description.
    # To avoid unnecessary machine destruction and creation if count changes,
    # each configuration gets an id (hash of the configuration), which is used
    # in the names of the machines. 
    machine_definition = {}
    try: 
        for block in config['config']['hosts']:

            # Create the hash of the machine configuration.
            machine_config = copy.deepcopy(block) 
            del(machine_config['count'])
            hash = hashlib.blake2s(yaml.dump(machine_config).encode('utf-8'), digest_size=8).hexdigest()

            # Create a new entry, if the config is new.
            if hash not in machine_definition:
                machine_definition[hash] = { 'current': 0, 'config': machine_config, 'names': [] }
                index = 1
            
            # Add hosts.
            for index in range(machine_definition[hash]['current'], machine_definition[hash]['current']+block['count']):
                machine_definition[hash]['names'].append(f'{hash}-{index}')
            machine_definition[hash]['current'] = index + 1
    except Exception as err:
        log(f'Generating machine description failed: {err}', 'fail')
        bye(1)

    # Now we prepare a machine dict to be used by the template.
    machines = []
    for _, data in machine_definition.items():
        for name in data['names']:
            machines.append({
                'name': f'''{config['config']['name']}-{name}''',
                'shortname': name,
                'size': data['config']['size'], 
                'os': data['config']['os'],
                'labels': data['config']['labels'] if 'labels' in data['config'] else None
            })
    config['config']['machines'] = machines

    # Fill in the template.
    try: 
        with open(template) as f:
            plan = jinja2.Template(f.read()).render(config['config'])
    except Exception as err:
        log(f'Error reading landscape: {err}', 'fail')
        bye(1)

    # Save plan.
    try:
        if not os.path.exists(terraform_dir):
            os.mkdir(terraform_dir, mode = 0o700)
        with open(terraform_file, 'w') as f:
            f.write(plan)
    except Exception as err:
        log(f'Error writing the plan file: {err}', 'fail')
        bye(1)

    return config


def delete(filename: str) -> None:
    """
    Simply deletes a file.
    """
    if os.path.exists(filename):
        try: 
            os.remove(filename)
        except Exception as err: 
            log(f'Error removing file "{filename}": {err}', 'fail')
            bye(1)
        log(f'File "{filename}" deleted.', 'success')
    else:
        log(f'File "{filename}" does not exist. Nothing to delete.', 'success')


def main():

    # Print greeting.
    log(f'''Running: {' '.join(sys.argv)} (Pid: {os.getpid()})''')

    # Check action.
    
    if sys.argv[1] not in ['provide']:
        log(f'Unknown action "{sys.argv[1]}"! Only "deploy" and "destroy" are supported.', 'fail')
        bye(1)
    action = sys.argv[1]

    # Load and validate configuration file.
    config = load_and_validate('config_provisioner')

    # Build inventory from template.
    #make_inventory(config)

    # Make Ansible working directory....

    # Run playbook



    # Say good bye.
    bye(0)




if __name__ == '__main__':
    main()


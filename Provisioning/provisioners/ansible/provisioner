#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Provisions infrastructure by using Ansible.

Exitcodes:

    0   Everything went fine.
    1   Something went wrong

Ideas:
    - 
    - 

ToDo:
    - 


Changelog:
----------
19.08.2022      v0.1        - and so it begins...
"""


from collections import defaultdict
import datetime
from pickletools import string1
import jinja2
import os
import schema
import subprocess
import sys
import yaml
from yaml.representer import Representer


VERSION = 'v0.1'
AUTHOR = 'soeren.schmidt@suse.com'


def log(text: str, level: str='info' ) -> None:
    """
    Prints the text to stdout preceded by timestamp and category. 
    """
    category = {'info': 'INFO',
                'success': ' OK ',
                'fail': 'FAIL',
                'warn': 'WARN' 
               }[level]
    print(f'[{datetime.datetime.now()}] [{category}] {text}', file=sys.stdout)

def bye(rc: int=0) -> None:
    """
    Logs termination message and exits with given exit code.
    """
    if rc == 0:
        log(f'Terminating successfully (exit code {rc}).', 'success')
    else:
        log(f'Terminating with failure (exit code {rc})!', 'fail')
    sys.exit(rc)

def load_and_validate(config_file: str) -> dict:
    """
    Loads the config file (YAML) into a dictionary and validates it
    against a schema afterwards.

    Terminates with error message and exit code 1 on failure.
    """

    # Load config
    try: 
        with open(config_file) as f:
            content = yaml.safe_load(f)
    except Exception as err:
        log(f'Error reading landscape: {err}', 'fail')
        bye(1)
    log(f'Landscape "{config_file}" loaded successfully.')

    # Check for an empty config.
    if not content:
        log(f'The landscape "{config_file}" is empty!', 'fail')
        bye(1)

    # Validate against schema.
    config_schema = schema.Schema({
        'build_dir': str,
        'provider_dir': str,
        'config': {

            schema.Optional('skip_deploy'): bool,                                 

            'name': str,
            schema.Optional('remote_user'): schema.Regex('^[a-z][-a-z0-9]*$',
                                                         error='"remote_user" must be a string matching "^[a-z][-a-z0-9]*$".'),
            'remote_user_public_key_file': str, 
            'remote_user_private_key_file': str, 
            schema.Optional('ssh_common_args'): schema.Or(str, None),
            schema.Optional('ssh_extra_args'): schema.Or(str, None),
            schema.Optional('scp_extra_args'): schema.Or(str, None),
            'playbooks': list,

            # From https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#creating-valid-variable-names:
            # A variable name can only include letters, numbers, and underscores. Python keywords or playbook keywords are not valid variable names. A variable name cannot begin with a number.

            # Content of all 'os', 'size' and all labels are affected!!!!!

            'machines': [
                { 'ip_address': str,   
                   'labels': schema.Or(None, [ str ]),
                   'os': str,
                   'size': str,
                   'shortname': str,
                   'name': str
                }
            ]
        }
    }, ignore_extra_keys=True)
    try:
        config_schema.validate(content)
    except schema.SchemaError as se:
        msgs = ['Errors during schema validation:'] 
        for err in se.errors + se.autos:
            if err:
                msgs.append(err)
        log('\n\t'.join(msgs), 'fail')
        bye(1)
    log('Schema validation passed.')

    return content

def make_working_dir(config: dir) -> None:
    """
    Creates the working directory for Ansible.
    """

    # Create ansible working directory, if not exist.
    try:
        if not os.path.exists(config['ansible_working_dir']):
            os.mkdir(config['ansible_working_dir'])
    except Exception as err:
        log(f'Could not create Ansible working directory: {err}', 'fail')
        bye(1)    


def make_config(config: dict) -> None:
    """
    Creates ansible.cfg.
    """

    ansible_config_file = f'''{config['ansible_working_dir']}/ansible.cfg'''
    template = f'''{config['provisioner_dir']}/templates/ansible.cfg.template'''

    # Fill in the template.
    try: 
        with open(template) as f:
            ansible_config = jinja2.Template(f.read()).render(config['config'])
    except Exception as err:
        log(f'Error reading landscape: {err}', 'fail')
        bye(1)

    # Save Ansible config.
    try:
        with open(ansible_config_file, 'w') as f:
            f.write(ansible_config)
    except Exception as err:
        log(f'Error writing the plan file: {err}', 'fail')
        bye(1)

def make_inventory(config: dict) -> None:
    """
    Uses config to create the inventory file for Ansible.
    """

    ansible_inventory_file = f'''{config['ansible_working_dir']}/inventory'''
    host_groups = defaultdict(lambda: defaultdict(dict))

    # Walk through the machines.
    try:
        for machine in config['config']['machines']:
            host_entry = { 'ansible_host': machine['ip_address'] }
            host_groups[machine['os']]['hosts'][machine['shortname']] = host_entry 
            host_groups[machine['size']]['hosts'][machine['shortname']] = host_entry 
            if machine['labels']:
               for label in machine['labels']:
                   host_groups[label]['hosts'][machine['shortname']] = host_entry 
    except Exception as err:
        log(f'Error building the inventory: {err}', 'fail')
        bye(1)

    # Write the inventory.
    yaml.add_representer(defaultdict, Representer.represent_dict)
    try:
        with open(ansible_inventory_file, 'w') as f:
            f.write(yaml.dump(dict(host_groups)))
    except Exception as err:
        log(f'Error writing the inventory file: {err}', 'fail')
        bye(1)

def run_playbooks(config: dict) -> None:
    """
    Executes all playbooks in config sequentially.
    """

    for playbook in config['config']['playbooks']:

        # If the playbook starts with $ it shall come from the library, otherwise
        # it is considered a path relative to the project directory.
        if playbook.startswith('$'):
            playbook = f'''{config['provisioner_dir']}/library/{playbook[1:]}'''
        else:
            playbook = f'''{config['project_path']}/{playbook}''' 

        environment = os.environ.copy()
        environment['ANSIBLE_CONFIG'] = 'ansible.cfg'
        
        command = ['ansible-playbook', '-i', 'inventory', f'{playbook}']
        command_string = ' ' .join(command)

        output = []

        log(f'Run now "{command_string}"')
        try:
            with subprocess.Popen(command, 
                                stdout = subprocess.PIPE, 
                                stderr = subprocess.STDOUT,
                                encoding = 'utf-8',
                                cwd = config['ansible_working_dir'],
                                env = environment
                                ) as proc:
                while proc.poll() is None:
                    for line in proc.stdout.readlines():
                        log(f'{command_string}: {line.strip()}')  
                        output.append(line.strip())

                if proc.returncode != 0:
                    raise ValueError(f'Ansible exited with return code {proc.returncode}.')

                if [x for x in output if x.startswith('[WARNING]')]:
                    raise ValueError(f'Playbook triggered warnings!.')
                            
        except Exception as err:
            log(f'Execution of "{command_string}" failed: {err}', 'fail')
            bye(1) 


def main():

    # Print greeting.
    log(f'''Running: {' '.join(sys.argv)} (Pid: {os.getpid()})''')

    # Check action.
    
    if sys.argv[1] not in ['provide']:
        log(f'Unknown action "{sys.argv[1]}"! Only "deploy" and "destroy" are supported.', 'fail')
        bye(1)
    action = sys.argv[1]

    # Load and validate configuration file.
    config = load_and_validate('config_provisioner')

    # Set working directory and create it
    config['ansible_working_dir'] = './ansible'
    make_working_dir(config)

    # Create Ansible configuration.
    make_config(config)

    # Build inventory from template.
    make_inventory(config)

    # Run playbooks
    run_playbooks(config)

    # Say good bye.
    bye(0)



if __name__ == '__main__':
    main()

